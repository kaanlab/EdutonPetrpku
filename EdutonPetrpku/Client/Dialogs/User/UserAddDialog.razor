@using System.Text.Json
@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />

            <MudText Align="Align.Left">Логотип</MudText>
            <MudGrid Class="justify-end mb-5">
                <MudItem>
                    @if (string.IsNullOrEmpty(Context.Image))
                    {
                        <img class="img-thumbnail" src="/upload/empty.jpg" style="min-height:120px;height:120px;" />
                    }
                    else
                    {
                        <img class="img-thumbnail" src="@Context.Image" style="min-height:120px;height:120px;" />
                    }
                </MudItem>
                <MudItem>
                    <InputFile id="fileInput" OnChange="OnInputFileChange" hidden />
                    <MudFab Size="Size.Small"
                            Color="Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Загрузить"
                            for="fileInput" />
                </MudItem>
            </MudGrid>

            <MudTextField Label="Название училища" Class="mb-3"
                          @bind-Value="Context.DisplayName" For="@(() => Context.DisplayName)" />
            <MudTextField Label="Логин" Class="mb-3"
                          @bind-Value="Context.UserName" For="@(() => Context.UserName)" />
            <MudTextField Label="Почта" Class="mb-3"
                          @bind-Value="Context.Email" For="@(() => Context.Email)" />

            <MudText Align="Align.Left">Диплом</MudText>
            <MudGrid Class="justify-end mb-5">

                <MudItem>
                    @if (string.IsNullOrEmpty(Context.Diploma))
                    {
                        <img class="img-thumbnail" src="upload/diploma.jpg" style="min-height:100px;height:100px;" />
                    }
                    else
                    {
                        <img class="img-thumbnail" src="@Context.Diploma" style="min-height:100px;height:100px;" />
                    }
                </MudItem>
                <MudItem>
                    <InputFile id="diplomaInput" OnChange="OnInputDiplomaChange" hidden />
                    <MudFab Size="Size.Small"
                            Color="Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Загрузить"
                            for="diplomaInput" />
                </MudItem>
            </MudGrid>

            <MudText Align="Align.Left">Ссылка на PDF</MudText>
            <MudGrid Class="justify-end mt-5">
                <MudItem>
                    @if (string.IsNullOrEmpty(Context.PdfUrl))
                    {
                        <img class="img-thumbnail" src="upload/empty.jpg" style="min-height:120px;height:120px;" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Custom.FileFormats.FilePdf" />
                        <MudText>@Context.PdfUrl</MudText>
                    }
                </MudItem>
                <MudItem>
                    <InputFile id="pdfUrlInput" OnChange="OnInputPdfUrlChange" hidden />
                    <MudFab Size="Size.Small"
                            Color="Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Загрузить"
                            for="pdfUrlInput" />
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отменить</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Info" OnClick="Add" Disabled="@formInvalid">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public AppUserCreateViewModel Context { get; set; } = new AppUserCreateViewModel();

    private bool formInvalid = true;
    private EditContext editContext;
    private readonly string imgPath = "upload";
    private int maxAllowedFiles = 1;


    protected override void OnInitialized()
    {
        editContext = new EditContext(Context);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var fileContent =
                new StreamContent(e.File.OpenReadStream(maxFileSize));

        fileContent.Headers.ContentType =
            new System.Net.Http.Headers.MediaTypeHeaderValue(e.File.ContentType);


        content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: e.File.Name);

        upload = true;

        if (upload)
        {
            var response = await httpClient.PostAsync("/api/file/avatar", content);

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                using var responseStream = await response.Content.ReadAsStreamAsync();

                var newUploadResult = await JsonSerializer.DeserializeAsync<UploadFileViewModel>(responseStream, options);
                Context.Image = newUploadResult.Url;
            }

        }
    }

    async Task OnInputDiplomaChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var fileContent =
                new StreamContent(e.File.OpenReadStream(maxFileSize));

        fileContent.Headers.ContentType =
            new System.Net.Http.Headers.MediaTypeHeaderValue(e.File.ContentType);


        content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: e.File.Name);

        upload = true;

        if (upload)
        {
            var response = await httpClient.PostAsync("/api/file/diploma", content);

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                using var responseStream = await response.Content.ReadAsStreamAsync();

                var newUploadResult = await JsonSerializer.DeserializeAsync<UploadFileViewModel>(responseStream, options);
                Context.Diploma = newUploadResult.Url;
            }

        }
    }

    async Task OnInputPdfUrlChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 15;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var fileContent =
                new StreamContent(e.File.OpenReadStream(maxFileSize));

        fileContent.Headers.ContentType =
            new System.Net.Http.Headers.MediaTypeHeaderValue(e.File.ContentType);


        content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: e.File.Name);

        upload = true;

        if (upload)
        {
            var response = await httpClient.PostAsync("/api/file/pdf", content);

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                using var responseStream = await response.Content.ReadAsStreamAsync();

                var newUploadResult = await JsonSerializer.DeserializeAsync<UploadFileViewModel>(responseStream, options);
                Context.PdfUrl = newUploadResult.Url;
            }

        }
    }

    void Add()
    {
        if (string.IsNullOrEmpty(Context.Image))
            Context.Image = @$"{imgPath}/empty.jpg";

        if (string.IsNullOrEmpty(Context.Diploma))
            Context.Diploma = @$"{imgPath}/diploma.jpg";

        MudDialog.Close(DialogResult.Ok(Context));
    }

    void Cancel() => MudDialog.Cancel();

}