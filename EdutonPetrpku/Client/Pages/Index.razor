@page "/"

@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView Roles="@GlobalVarables.Roles.ADMIN">
    <MudIconButton Icon="@Icons.Material.Filled.AddBox" Color="Color.Primary" Size="Size.Large" @onclick="AddArticle" Class="mr-3" />
</AuthorizeView>

@if (articles is not null)
{
    foreach (var article in articles)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@article.Title</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <AuthorizeView Roles="@GlobalVarables.Roles.ADMIN">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" @onclick="(e) => UpdateArticle(article)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" @onclick="(e) => DeleteArticle(article)" />
                    </AuthorizeView>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@article.Content</MudText>
                <MudText Typo="Typo.caption">Опубликовано: @article.PublishDate</MudText>
                @if (article.UpdateDate.HasValue)
                {
                    <MudText Typo="Typo.caption">
                        Обновлено: @article.UpdateDate.Value.ToShortDateString()
                    </MudText>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
            </MudCardActions>
        </MudCard>
    }
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}

@code {

    List<Article> articles;

    protected override async Task OnInitializedAsync()
    {
        articles = await httpClient.GetFromJsonAsync<List<Article>>("api/article/all");

    }

    private async Task AddArticle()
    {
        var dialog = DialogService.Show<ArticleAddOrUpdateDialog>("Добавление новости");
        var result = await dialog.Result;
        //TODO: Add AppUser on the client side

        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<Article>("api/article/add", result.Data as Article);
            if (response.IsSuccessStatusCode)
            {
                var addedArticle = await response.Content.ReadFromJsonAsync<Article>();
                articles.Add(addedArticle);
                Snackbar.Add("Новость успешно добавлена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу добавить новость!", Severity.Error);
            }
        }
    }

    private async Task UpdateArticle(Article article)
    {
        var parameters = new DialogParameters { ["article"] = article };

        var dialog = DialogService.Show<ArticleAddOrUpdateDialog>("Обновить новость", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PutAsJsonAsync<Article>("api/article/update", result.Data as Article);
            if (response.IsSuccessStatusCode)
            {
                var updatedArticle = await response.Content.ReadFromJsonAsync<Article>();
                var index = articles.IndexOf(article);
                articles.Remove(article);
                articles.Insert(index, updatedArticle);
                Snackbar.Add("Информация успешно обновлена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить новость!", Severity.Error);
            }
        }
    }

    private async Task DeleteArticle(Article article)
    {
        var parameters = new DialogParameters { ["article"] = article };

        var dialog = DialogService.Show<ArticleDeleteDialog>("Удалить новость", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var articleToDelete = result.Data as Article;
            var response = await httpClient.DeleteAsync($"api/article/delete/{articleToDelete.Id}");
            if (response.IsSuccessStatusCode)
            {
                articles.Remove(articleToDelete);
                Snackbar.Add("Новость успешно удалена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу удалить новость!", Severity.Error);
            }

        }
    }
}
