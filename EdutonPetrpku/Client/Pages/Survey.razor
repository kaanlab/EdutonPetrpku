@page "/survey"

@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = GlobalVarables.Roles.USER)]

<div class="mb-4">
    @if (allNationalities is null)
    {
        <MudProgressCircular Indeterminate="true"></MudProgressCircular>
    }
    else if (checkedNationaliti is not null)
    {
        <MudText Typo="Typo.h5" Class="my-4">Спасибо за участие в Эдутоне!</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="checkedNationaliti.Name" Label="Вы выбрали коренной народ" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Groups" AdornmentColor="Color.Info" Disabled="true" />
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudText Typo="Typo.h6" Class="my-4">Ваша тема курса для эдутона</MudText>
        <EditForm Model="@model" OnInvalidSubmit="OnValidSubmit">
            <MudCard>
                <MudCardContent>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect Label="Перечень коренных малочисленных народов" @bind-Value="UserChoice" HelperText="Коренной народ"
                               AdornmentIcon="@Icons.Material.Filled.Groups" AdornmentColor="Color.Primary" Required="true">
                            <MudSelectItem Value="-1" Disabled="true">Выберите тему из списка</MudSelectItem>
                            @foreach (NationalityViewModel nationality in freeNationalities)
                            {
                            <MudSelectItem Value="@nationality.Id">@nationality.Name</MudSelectItem>
                            }
                    </MudSelect>
                </MudItem>
            </MudCardContent>
            <MudCardActions>
                @if (UserChoice > 0)
                    {
                        <MudAlert Severity="Severity.Warning">После нажатия на кнопку сохранить вы не сможете поменять тему!</MudAlert>
                        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="AcceptSuvery">Сохранить</MudButton>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">Вы еще не выбрали тему для курса!</MudAlert>
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</div>
<div>
    @if (!string.IsNullOrEmpty(authUserDiploma))
    {
        <MudText Typo="Typo.h5" Class="my-4">Ваш сертификат участника:</MudText>
        <img src="@authUserDiploma" class="rounded mx-auto d-block" style="min-width:500px;width:500px;">
    }
</div>

@code {

    private string authUserId;
    private string authUserDiploma;

    private List<NationalityViewModel> allNationalities;
    private List<NationalityViewModel> freeNationalities;
    private NationalityViewModel? checkedNationaliti;
    private SurveyViewModel model = new SurveyViewModel();
    private bool success;


    //[CascadingParameter]
    //private Task<AuthenticationState> authenticationState { get; set; }

    private int UserChoice { get; set; } = -1;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;

        if (authUser.Identity.IsAuthenticated)
        {
            authUserId = authUser.FindFirst(c => c.Type == ClaimTypes.Sid)?.Value;
            authUserDiploma = authUser.FindFirst(c => c.Type == ClaimTypes.UserData)?.Value;

            allNationalities = await httpClient.GetFromJsonAsync<List<NationalityViewModel>>("api/nationality/all");
            checkedNationaliti = allNationalities.Find(u => u.AppUserId == authUserId);
            freeNationalities = allNationalities.Where(u => u.AppUserId == null).ToList();
        }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    private async Task AcceptSuvery()
    {
        model.AppUserId = authUserId;
        model.NationalityId = UserChoice;

        var response = await httpClient.PostAsJsonAsync<SurveyViewModel>("api/survey/savechoice", model);
        if (response.IsSuccessStatusCode)
        {
            checkedNationaliti = await response.Content.ReadFromJsonAsync<NationalityViewModel>();
        }
        StateHasChanged();
    }
}

