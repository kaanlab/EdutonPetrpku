@page "/survey"

@implements IDisposable

@inject HttpClient httpClient
@inject HttpInterceptorService Interceptor

@attribute [Authorize(Roles = GlobalVarables.Roles.USER)]


@if (allNationalities is null)
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}
else if (checkedNationaliti is not null)
{
    <MudText Typo="Typo.h6" Class="my-4">Спасибо!</MudText>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="checkedNationaliti.Name" Label="Вы выбрали коренной народ" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Groups" AdornmentColor="Color.Info" Disabled="true" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudText Typo="Typo.h6" Class="my-4">Ваша тема курса для эдутона</MudText>
    <EditForm Model="@model" OnInvalidSubmit="OnValidSubmit">
        <MudCard>
            <MudCardContent>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect Label="Перечень коренных малочисленных народов" @bind-Value="UserChoice" HelperText="Коренной народ"
                               AdornmentIcon="@Icons.Material.Filled.Groups" AdornmentColor="Color.Primary" Required="true">
                        <MudSelectItem Value="-1" Disabled="true">Выберите тему из списка</MudSelectItem>
                        @foreach (Nationality nationality in freeNationalities)
                            {
                            <MudSelectItem Value="@nationality.Id">@nationality.Name</MudSelectItem>
                            }
                    </MudSelect>
                </MudItem>
            </MudCardContent>
            <MudCardActions>
                @if (UserChoice > 0)
                {
                    <MudAlert Severity="Severity.Warning">После нажатия на кнопку сохранить вы не сможете поменять тему!</MudAlert>
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="AcceptSuvery">Сохранить</MudButton>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">Вы еще не выбрали тему для курса!</MudAlert>
                }
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {

    private string authUserId;
    private string authUserRole;
    private List<Nationality> allNationalities;
    private List<Nationality> freeNationalities;
    private Nationality? checkedNationaliti;
    private SurveyViewModel model = new SurveyViewModel();
    private bool success;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private int UserChoice { get; set; } = -1;


    protected override async Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();
        var authUser = (await authenticationState).User;
        authUserId = authUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Sid).Value;

        allNationalities = await httpClient.GetFromJsonAsync<List<Nationality>>("api/nationality/all");
        checkedNationaliti = allNationalities.FirstOrDefault(u => u.AppUserId == authUserId);
        freeNationalities = allNationalities.Where(u => u.AppUser == null).ToList();
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

    private async Task AcceptSuvery()
    {
        model.AppUserId = authUserId;
        model.NationalityId = UserChoice;

        var response = await httpClient.PostAsJsonAsync<SurveyViewModel>("api/survey/savechoice", model);
        if (response.IsSuccessStatusCode)
        {
            checkedNationaliti = await response.Content.ReadFromJsonAsync<Nationality>();
        }
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        Interceptor.DisposeEvent();
    }
}

