@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if (appUsers is not null)
{
    <MudTable Items="@appUsers" Hover="true" Class="my-5">
        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddBox" Color="Color.Primary" Size="Size.Large" @onclick="AddUser" Class="mr-3" />
            <MudText Typo="Typo.h6">Пользователи</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Логотип</MudTh>
            <MudTh>Название училища</MudTh>
            <MudTh>Логин</MudTh>
            <MudTh>Почта</MudTh>
            <MudTh>Диплом</MudTh>
            <MudTh>Ссылка на PDF</MudTh> 
            <MudTh></MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Изображение">
                <img class="img-thumbnail" src="@context.Image" style="min-height:100px;height:100px;" />
            </MudTd>
            <MudTd DataLabel="Название училища">@context.DisplayName</MudTd>
            <MudTd DataLabel="Логин">@context.UserName</MudTd>
            <MudTd DataLabel="Почта">@context.Email</MudTd>
            <MudTd DataLabel="Диплом">
                <img class="img-thumbnail" src="@context.Diploma" style="min-height:100px;height:100px;" />
            </MudTd>
             <MudTd DataLabel="Ссылка на PDF">@context.PdfUrl</MudTd>
            <MudTd><MudButton Color="Color.Info" @onclick="@((e) => UpdateUser(context))">Изменить</MudButton></MudTd>
            <MudTd><MudButton Color="Color.Warning" @onclick="@((e) => ChangePassword(context))">Сменить пароль</MudButton></MudTd>
            <MudTd><MudButton Color="Color.Error" @onclick="@((e) => DeleteUser(context))">Удалить</MudButton></MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}


@code {
    private List<AppUserViewModel> appUsers;

    protected override async Task OnInitializedAsync()
    {
        appUsers = await httpClient.GetFromJsonAsync<List<AppUserViewModel>>("api/user/all");
    }

    private async Task AddUser()
    {

        var dialog = DialogService.Show<UserAddDialog>("Добавление пользователя");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<AppUserCreateViewModel>("api/user/add", result.Data as AppUserCreateViewModel);
            if (response.IsSuccessStatusCode)
            {
                var addedUser = await response.Content.ReadFromJsonAsync<AppUserViewModel>();
                appUsers.Add(addedUser);
                Snackbar.Add("Пользователь успешно добавлен!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу добавить пользователя!", Severity.Error);
            }
        }
    }


    private async Task UpdateUser(AppUserViewModel context)
    {
        var appUserModel = new AppUserUpdateViewModel { DisplayName = context.DisplayName, Email = context.Email, Image = context.Image, UserName = context.UserName };
        var parameters = new DialogParameters { ["context"] = appUserModel };

        var dialog = DialogService.Show<UserUpdateDialog>("Обновить данные пользователя", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PutAsJsonAsync<AppUserUpdateViewModel>("api/user/update", result.Data as AppUserUpdateViewModel);
            if (response.IsSuccessStatusCode)
            {
                var updatedUser = await response.Content.ReadFromJsonAsync<AppUserViewModel>();
                var index = appUsers.IndexOf(context);
                appUsers.Remove(context);
                appUsers.Insert(index, updatedUser);
                Snackbar.Add("Информация о пользователе успешно обновлена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить пользователя!", Severity.Error);
            }
        }
    }


    private async Task ChangePassword(AppUserViewModel context)
    {
        var appUserModel = new AppUserChPassViewModel { DisplayName = context.DisplayName, UserName = context.UserName };
        var parameters = new DialogParameters { ["context"] = appUserModel };

        var dialog = DialogService.Show<UserChangePwDialog>("Сменить пароль пользователя", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<AppUserChPassViewModel>("api/user/changepw", result.Data as AppUserChPassViewModel);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пароль успешно обновлен!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить пароль!", Severity.Error);
            }
        }
    }


    private async Task DeleteUser(AppUserViewModel context)
    {
        var parameters = new DialogParameters { ["context"] = context };

        if (context.UserName == GlobalVarables.SITE_ADMIN_ACCOUNT)
        {
            Snackbar.Add($"Не могу удалить пользователя {context.DisplayName}!", Severity.Error);
        }
        else
        {
            var dialog = DialogService.Show<UserDeleteDialog>("Удалить пользователя", parameters);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                var userToDelete = result.Data as AppUserViewModel;
                var response = await httpClient.DeleteAsync($"api/user/delete/{userToDelete.UserName}");
                if (response.IsSuccessStatusCode)
                {
                    appUsers.Remove(userToDelete);
                    Snackbar.Add("Пользователь успешно удален!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Не могу удалить пользователя!", Severity.Error);
                }

            }
        }
    }

}