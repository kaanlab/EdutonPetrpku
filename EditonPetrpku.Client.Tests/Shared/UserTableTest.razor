@inherits TestContext
@code {

    MockHttpMessageHandler mock;
    HttpClient httpClient;

    public UserTableTest()
    {
        this.AddMudBlazorSupport();

        Services.AddSingleton<FakeNavigationManager>();
        Services.AddSingleton<NavigationManager>(s => s.GetRequiredService<FakeNavigationManager>());

        mock = Services.AddMockHttpClient();

        httpClient = mock.ToHttpClient();
        httpClient.BaseAddress = new Uri("http://localhost");
        Services.AddSingleton<HttpClient>(httpClient);


    }

    [Theory]
    [ClassData(typeof(UserTableTestData))]
    public void UserTableForTwoUsersShoudRendersTwoRows(List<AppUserViewModel> appUserViewModels)
    {
        mock.When("/api/user/all").RespondJson(appUserViewModels);
        httpClient.GetAsync("/api/user/all").Wait();

        var cut = Render(@<UserTable/>);

        // Assert
        var tableRows = cut.FindAll("tbody tr").Count;

        tableRows.Should().Be(2);

    }

    [Theory]
    [ClassData(typeof(UserTableTestData))]
    public void UserTableForTwoUsersShoudRendersImgInFirstCell(List<AppUserViewModel> appUserViewModels)
    {

        mock.When("/api/user/all").RespondJson(appUserViewModels);
        httpClient.GetAsync("/api/user/all").Wait();

        var cut = Render(@<UserTable/>);
        
        // Assert
        var firstTableCell = cut.Find("tbody td").Children.First();

        firstTableCell.ClassName.Should().Be("img-thumbnail");
        firstTableCell.OuterHtml.Should().Contain(@"upload\empty.jpg");
    }
}
